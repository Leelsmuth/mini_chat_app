{"version":3,"sources":["User.js","Message.js","FrontPage.js","App.js","index.js"],"names":["User","props","users","email","name","selectUser","useCallback","mail","user","selectedMail","deleteUser","react_default","a","createElement","className","style","Button_default","size","variant","onClick","map","item","key","id","MessageQuery","gql","_templateObject","CreateMessageMutation","_templateObject2","UserTypingMutation","_templateObject3","MessageSubscription","_templateObject4","UserTypingSubscription","_templateObject5","compose","graphql","chatBox","useRef","_useState","useState","_useState2","Object","slicedToArray","message","setMessage","_useState3","_useState4","userTyping","setUser","_useState5","_useState6","timer","setTimer","useEffect","subscribeToMore","document","variables","receiverMail","updateQuery","prev","_ref","subscriptionData","data","msg","newMessage","messages","find","x","objectSpread","concat","toConsumableArray","_ref2","current","scrollToBottom","scrollIntoView","handleChange","_ref3","asyncToGenerator","regenerator_default","mark","_callee2","e","changeMail","wrap","_context2","next","target","value","_ref4","_callee","_context","stop","apply","this","arguments","clearTimeout","setTimeout","_x","handleSubmit","_ref5","_callee3","_context3","preventDefault","length","abrupt","createMessage","senderMail","timestamp","Date","now","update","store","_ref6","readQuery","query","push","writeQuery","_x2","_x3","_x4","_props$message","error","loading","receiverName","userLeft","setStyle","moment","fromNow","onSubmit","ref","TextField_default","margin","placeholder","fullWidth","onChange","Registration","token","setToken","setError","defineProperty","Paper_default","elevation","required","label","type","existingUser","some","validator","isEmail","createUser","localStorage","JSON","stringify","UserQuery","App_templateObject","CreateUserMutation","App_templateObject2","DeleteUserMutation","App_templateObject3","AddUserSubscription","App_templateObject4","DeleteUserSubscription","App_templateObject5","getItem","parse","receiverState","setReceiverState","setUserLeft","hidden","setHidden","newUser","oldUser","newUsers","filter","removeItem","_props$data","src_User","display","src_Message","FrontPage","httpLink","HttpLink","uri","wsLink","WebSocketLink","options","reconnect","link","split","_getMainDefinition","getMainDefinition","kind","operation","client","ApolloClient","cache","InMemoryCache","ReactDOM","render","react_apollo_browser_umd","src_App","getElementById"],"mappings":"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","file":"static/js/main.b414b8b2.chunk.js","sourcesContent":["import React, { useCallback } from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nconst User = props => {\r\n  const { users, email, name } = props;\r\n\r\n  const selectUser = useCallback((mail, user) => {\r\n    props.selectedMail(mail, user);\r\n  });\r\n\r\n  const deleteUser = useCallback(() => {\r\n    props.deleteUser(email);\r\n  });\r\n\r\n  return (\r\n    <div className=\"user-welcome\" style={props.style}>\r\n      <div className=\"user-heading\">\r\n      <p>Hello, {name}</p>\r\n        <Button\r\n          className=\"leave\"\r\n          size=\"small\"\r\n          variant=\"outlined\"\r\n          onClick={deleteUser}\r\n        >\r\n          Leave Chat?\r\n        </Button>\r\n      </div>\r\n      <div className=\"select-user\">\r\n        {users.map(item =>\r\n          item.email !== email ? (\r\n            <div\r\n              key={item.id}\r\n              className=\"users\"\r\n              onClick={() => selectUser(item.email, item.name)}\r\n            >\r\n              {item.name}\r\n            </div>\r\n          ) : (\r\n            \"\"\r\n          )\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default User;\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport gql from \"graphql-tag\";\r\nimport { graphql, compose } from \"react-apollo\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport moment from \"moment\";\r\n\r\nconst MessageQuery = gql`\r\n  query {\r\n    messages {\r\n      id\r\n      message\r\n      senderMail\r\n      receiverMail\r\n      timestamp\r\n      users {\r\n        name\r\n        email\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst CreateMessageMutation = gql`\r\n  mutation(\r\n    $message: String!\r\n    $senderMail: String!\r\n    $receiverMail: String!\r\n    $timestamp: Float!\r\n  ) {\r\n    createMessage(\r\n      message: $message\r\n      senderMail: $senderMail\r\n      receiverMail: $receiverMail\r\n      timestamp: $timestamp\r\n    ) {\r\n      message\r\n      senderMail\r\n      receiverMail\r\n      id\r\n      timestamp\r\n      users {\r\n        name\r\n        email\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst UserTypingMutation = gql`\r\n  mutation($email: String!, $receiverMail: String!) {\r\n    userTyping(email: $email, receiverMail: $receiverMail)\r\n  }\r\n`;\r\n\r\nconst MessageSubscription = gql`\r\n  subscription($receiverMail: String!) {\r\n    newMessage(receiverMail: $receiverMail) {\r\n      message\r\n      senderMail\r\n      receiverMail\r\n      id\r\n      timestamp\r\n      users {\r\n        name\r\n        email\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst UserTypingSubscription = gql`\r\n  subscription($receiverMail: String!) {\r\n    userTyping(receiverMail: $receiverMail)\r\n  }\r\n`;\r\n\r\nconst Message = props => {\r\n  const chatBox = useRef(null);\r\n\r\n  const [message, setMessage] = useState(\"\");\r\n\r\n  const [userTyping, setUser] = useState(\"\");\r\n\r\n  const [timer, setTimer] = useState(null);\r\n\r\n  const handleShow = () => {\r\n    props.setStyle()\r\n  }\r\n\r\n  useEffect(() => {\r\n    props.message.subscribeToMore({\r\n      document: MessageSubscription,\r\n      variables: {\r\n        receiverMail: props.email\r\n      },\r\n      updateQuery: (prev, { subscriptionData }) => {\r\n        if (!subscriptionData.data) return prev;\r\n        const msg = subscriptionData.data.newMessage;\r\n        if (prev.messages.find(x => x.id === msg.id)) {\r\n          return prev;\r\n        }\r\n        return { ...prev, messages: [...prev.messages, msg] };\r\n      }\r\n    });\r\n    props.message.subscribeToMore({\r\n      document: UserTypingSubscription,\r\n      variables: {\r\n        receiverMail: props.email\r\n      },\r\n      updateQuery: (prev, { subscriptionData }) => {\r\n        if (!subscriptionData.data) return prev;\r\n        const user = subscriptionData.data.userTyping;\r\n        setUser(user);\r\n      }\r\n    });\r\n    if (chatBox.current) {\r\n      scrollToBottom();\r\n    }\r\n  });\r\n\r\n  const scrollToBottom = () => {\r\n    chatBox.current.scrollIntoView();\r\n  };\r\n\r\n  const handleChange = async e => {\r\n    setMessage(e.target.value);\r\n    const { email, receiverMail } = props;\r\n    await props.userTyping({\r\n      variables: {\r\n        email,\r\n        receiverMail\r\n      }\r\n    });\r\n    const changeMail = async () => {\r\n      await props.userTyping({\r\n        variables: {\r\n          email: \"email\",\r\n          receiverMail\r\n        }\r\n      });\r\n    };\r\n    clearTimeout(timer);\r\n    setTimer(setTimeout(changeMail, 2000));\r\n  };\r\n\r\n  const handleSubmit = async (e, message, email) => {\r\n    setMessage(\"\");\r\n    e.preventDefault();\r\n    const { receiverMail } = props;\r\n    if (!message.length) return null;\r\n    await props.createMessage({\r\n      variables: {\r\n        receiverMail: receiverMail,\r\n        senderMail: email,\r\n        message: message,\r\n        timestamp: Date.now()\r\n      },\r\n      update: (store, { data: { createMessage } }) => {\r\n        const data = store.readQuery({ query: MessageQuery });\r\n        data.messages.push(createMessage);\r\n        store.writeQuery({ query: MessageQuery, data });\r\n      }\r\n    });\r\n    await props.userTyping({\r\n      variables: {\r\n        email: \"email\",\r\n        receiverMail\r\n      }\r\n    });\r\n  };\r\n\r\n  const {\r\n    message: { error, loading, messages },\r\n    email,\r\n    receiverMail,\r\n    receiverName,\r\n    userLeft\r\n  } = props;\r\n\r\n  if (error || loading) return null;\r\n\r\n  return (\r\n    <div className=\"personal-chat\" style={props.style}>\r\n      <div className=\"chats-header\">\r\n        <div className=\"back-button\" onClick={handleShow}>\r\n          <div className=\"bar1\" />\r\n          <div className=\"bar2\" />\r\n          <div className=\"bar3\" />\r\n        </div>\r\n        <div className=\"user-typing\">\r\n          {userTyping && userTyping === receiverMail\r\n            ? `${receiverName} is typing`\r\n            : receiverName}\r\n        </div>\r\n      </div>\r\n      <div className=\"all-messages\">\r\n        {messages.map(item =>\r\n          (item.senderMail === email && item.receiverMail === receiverMail) ||\r\n          (item.senderMail === receiverMail && item.receiverMail === email) ? (\r\n            <div\r\n              key={item.id}\r\n              className={item.users.map(a =>\r\n                a.email === receiverMail ? \"receiver\" : \"sender\"\r\n              )}\r\n            >\r\n              <div className=\"sender-name\">{item.users.map(x => x.name)}</div>\r\n              {item.message}{\" \"}\r\n              <span className=\"time\"> {moment(item.timestamp).fromNow()}</span>\r\n            </div>\r\n          ) : (\r\n            \"\"\r\n          )\r\n        )}\r\n        {userLeft && userLeft === receiverMail ? (\r\n          <div>{receiverName} has left the chat. </div>\r\n        ) : null}\r\n      </div>\r\n      {receiverMail && receiverName && !userLeft ? (\r\n        <form\r\n          onSubmit={e => handleSubmit(e, message, email)}\r\n          ref={chatBox}\r\n          className=\"chat-box\"\r\n        >\r\n          <TextField\r\n            style={{ margin: 10 }}\r\n            placeholder={\"Say something to \" + receiverName}\r\n            fullWidth\r\n            name=\"message\"\r\n            value={message}\r\n            onChange={handleChange}\r\n            margin=\"normal\"\r\n            variant=\"outlined\"\r\n          />\r\n        </form>\r\n      ) : (\r\n        <div className=\"select-message\">Select a logged in user from the left panel</div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default compose(\r\n  graphql(MessageQuery, { name: \"message\" }),\r\n  graphql(CreateMessageMutation, { name: \"createMessage\" }),\r\n  graphql(UserTypingMutation, { name: \"userTyping\" })\r\n)(Message);\r\n","import React, { useState } from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport validator from \"validator\";\r\n\r\nconst Registration = props => {\r\n  const [token, setToken] = useState({ name: \"\", email: \"\" });\r\n  const [error, setError] = useState(\"\");\r\n\r\n  const handleChange = e => {\r\n    setToken({ ...token, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const validate = () => {\r\n    const { name, email } = token;\r\n\r\n    const existingUser = props.users.some(function(user) {\r\n      return user.email === email;\r\n    });\r\n\r\n    if (!name.length) {\r\n      setError(\"Name is required\");\r\n    }\r\n\r\n    if (!validator.isEmail(email)) {\r\n      setError(\"Valid email is required\");\r\n    }\r\n\r\n    if (existingUser) {\r\n      setError(\"Email already in use\");\r\n    }\r\n\r\n    if (name.length && validator.isEmail(email) && !existingUser) {\r\n      setError(\"\");\r\n      props.createUser(email, name);\r\n      localStorage[\"token\"] = JSON.stringify(token);\r\n    }\r\n  };\r\n\r\n  const { name, email } = token;\r\n  return (\r\n    <Paper elevation={3} className=\"paper\">\r\n      User Details\r\n      <TextField\r\n        required\r\n        id=\"outlined-name\"\r\n        label=\"Name\"\r\n        name=\"name\"\r\n        value={name}\r\n        onChange={handleChange}\r\n        variant=\"outlined\"\r\n        style={{ margin: 10 }}\r\n      />\r\n      <TextField\r\n        required\r\n        id=\"outlined-email-input\"\r\n        type=\"email\"\r\n        label=\"Email\"\r\n        name=\"email\"\r\n        value={email}\r\n        onChange={handleChange}\r\n        variant=\"outlined\"\r\n        className=\"text-area\"\r\n        style={{ margin: 10 }}\r\n      />\r\n      <Button variant=\"contained\" onClick={validate} style={{ margin: 15 }}>\r\n        Enter Chat\r\n      </Button>\r\n      <div>{error}</div>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default Registration;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport User from \"./User\";\r\nimport Message from \"./Message\";\r\nimport Registration from \"./FrontPage\";\r\nimport gql from \"graphql-tag\";\r\nimport { graphql, compose } from \"react-apollo\";\r\n\r\nconst UserQuery = gql`\r\n  query {\r\n    users {\r\n      id\r\n      name\r\n      email\r\n      messages {\r\n        message\r\n        senderMail\r\n        receiverMail\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst CreateUserMutation = gql`\r\n  mutation($name: String!, $email: String!) {\r\n    createUser(name: $name, email: $email) {\r\n      name\r\n      email\r\n      id\r\n      messages {\r\n        message\r\n        senderMail\r\n        receiverMail\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst DeleteUserMutation = gql`\r\n  mutation($email: String!) {\r\n    deleteUser(email: $email)\r\n  }\r\n`;\r\n\r\nconst AddUserSubscription = gql`\r\n  subscription {\r\n    newUser {\r\n      name\r\n      email\r\n      id\r\n      messages {\r\n        message\r\n        senderMail\r\n        receiverMail\r\n        timestamp\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst DeleteUserSubscription = gql`\r\n  subscription {\r\n    oldUser\r\n  }\r\n`;\r\n\r\nconst App = props => {\r\n  const user =\r\n    (localStorage.getItem(\"token\") &&\r\n      JSON.parse(localStorage.getItem(\"token\"))) ||\r\n    {};\r\n\r\n  const [receiverState, setReceiverState] = useState({\r\n    receiverMail: \"\",\r\n    receiverName: \"\"\r\n  });\r\n\r\n  const [userLeft, setUserLeft] = useState(\"\");\r\n\r\n  const [hidden, setHidden] = useState(false);\r\n\r\n  const setSelectedMail = (mail, user) => {\r\n    setReceiverState(receiverState => {\r\n      return { ...receiverState, receiverMail: mail, receiverName: user };\r\n    });\r\n    setHidden(!hidden);\r\n  };\r\n\r\n  const setStyle = () => {\r\n    setHidden(!hidden);\r\n  }\r\n\r\n  useEffect(() => {\r\n    const subscribeToMore = props.data.subscribeToMore;\r\n    subscribeToMore({\r\n      document: AddUserSubscription,\r\n      updateQuery: (prev, { subscriptionData }) => {\r\n        if (!subscriptionData.data) return prev;\r\n        const user = subscriptionData.data.newUser;\r\n        if (!prev.users.find(x => x.id === user.id)) {\r\n          return { ...prev, users: [...prev.users, user] };\r\n        }\r\n        return prev;\r\n      }\r\n    });\r\n    subscribeToMore({\r\n      document: DeleteUserSubscription,\r\n      updateQuery: (prev, { subscriptionData }) => {\r\n        if (!subscriptionData.data) return prev;\r\n        const oldUser = subscriptionData.data.oldUser;\r\n        if (prev.users.some(x => x.email === oldUser)) {\r\n          const newUsers = prev.users.filter(x => x.email !== oldUser);\r\n          prev.users = newUsers;\r\n          return prev;\r\n        }\r\n        setUserLeft(oldUser);\r\n        return prev;\r\n      }\r\n    });\r\n  }, [props.data]);\r\n\r\n  const createUser = async (email, name) => {\r\n    await props.createUser({\r\n      variables: {\r\n        email,\r\n        name\r\n      },\r\n      update: (store, { data: { createUser } }) => {\r\n        const data = store.readQuery({ query: UserQuery });\r\n        if (!data.users.find(x => x.id === createUser.id)) {\r\n          data.users.push(createUser);\r\n        }\r\n        store.writeQuery({ query: UserQuery, data });\r\n      }\r\n    });\r\n  };\r\n\r\n  const deleteUser = async email => {\r\n    localStorage.removeItem(\"token\");\r\n    await props.deleteUser({\r\n      variables: { email },\r\n      update: store => {\r\n        const data = store.readQuery({ query: UserQuery });\r\n        data.users = data.users.filter(x => x.email !== email);\r\n        store.writeQuery({ query: UserQuery, data });\r\n      }\r\n    });\r\n  };\r\n\r\n  const { receiverMail, receiverName } = receiverState;\r\n  const {\r\n    data: { users, error, loading }\r\n  } = props;\r\n\r\n  if (loading || error) return null;\r\n  if (localStorage.getItem(\"token\")) {\r\n    return (\r\n      <div className=\"chat-page\">\r\n        <User\r\n          style={{ display: hidden ? \"none\" : \"block\" }}\r\n          users={users}\r\n          email={user.email}\r\n          name={user.name}\r\n          selectedMail={setSelectedMail}\r\n          deleteUser={deleteUser}\r\n        />\r\n        <Message\r\n          style={{ display: hidden ? \"block\" : \"none\" }}\r\n          email={user.email}\r\n          receiverMail={receiverMail}\r\n          receiverName={receiverName}\r\n          userLeft={userLeft}\r\n          name={user.name}\r\n          setStyle={setStyle}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n  return <Registration users={users} createUser={createUser} />;\r\n};\r\n\r\nexport default compose(\r\n  graphql(UserQuery),\r\n  graphql(CreateUserMutation, { name: \"createUser\" }),\r\n  graphql(DeleteUserMutation, { name: \"deleteUser\" })\r\n)(App);\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport ApolloClient from \"apollo-client\";\r\nimport { ApolloProvider } from \"react-apollo\";\r\nimport { split } from 'apollo-link';\r\nimport { HttpLink } from 'apollo-link-http';\r\nimport { WebSocketLink } from 'apollo-link-ws';\r\nimport { getMainDefinition } from 'apollo-utilities';\r\nimport { InMemoryCache } from 'apollo-cache-inmemory'\r\nimport App from \"./App\";\r\n\r\nimport \"./index.css\";\r\n\r\n// Create an http link:\r\nconst httpLink = new HttpLink({\r\n  uri: 'https://localhost:4000/'\r\n});\r\n\r\n// Create a WebSocket link:\r\nconst wsLink = new WebSocketLink({\r\n  uri: `wss://localhost:4000/`,\r\n  options: {\r\n    reconnect: true\r\n  }\r\n});\r\n\r\n// using the ability to split links, you can send data to each link\r\n// depending on what kind of operation is being sent\r\nconst link = split(\r\n  // split based on operation type\r\n  ({ query }) => {\r\n    const { kind, operation } = getMainDefinition(query);\r\n    return kind === 'OperationDefinition' && operation === 'subscription';\r\n  },\r\n  wsLink,\r\n  httpLink,\r\n);\r\n\r\nconst client = new ApolloClient({\r\n  link,\r\n  cache: new InMemoryCache(),\r\n})\r\n\r\nReactDOM.render(\r\n  <ApolloProvider client={client}>\r\n    <App />\r\n  </ApolloProvider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n"],"sourceRoot":""}
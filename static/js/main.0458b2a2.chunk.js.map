{"version":3,"sources":["User.js","Message.js","FrontPage.js","App.js","index.js"],"names":["User","props","users","email","name","selectedMail","deleteUser","selectUserFun","useCallback","mail","user","deleteUserFun","react_default","a","createElement","className","style","Button_default","size","variant","onClick","map","item","key","id","MessageQuery","gql","_templateObject","CreateMessageMutation","_templateObject2","UserTypingMutation","_templateObject3","MessageSubscription","_templateObject4","UserTypingSubscription","_templateObject5","compose","graphql","chatBox","useRef","_useState","useState","_useState2","Object","slicedToArray","message","setMessage","_useState3","_useState4","userTyping","setUser","_useState5","_useState6","timer","setTimer","useEffect","subscribeToMore","document","variables","receiverMail","updateQuery","prev","_ref","subscriptionData","data","msg","newMessage","messages","find","x","objectSpread","concat","toConsumableArray","_ref2","current","scrollToBottom","scrollIntoView","handleChange","_ref3","asyncToGenerator","regenerator_default","mark","_callee2","e","changeMail","wrap","_context2","next","target","value","_ref4","_callee","_context","stop","apply","this","arguments","clearTimeout","setTimeout","_x","handleSubmit","_ref5","_callee3","_context3","preventDefault","length","abrupt","createMessage","senderMail","timestamp","Date","now","update","store","_ref6","readQuery","query","push","writeQuery","_x2","_x3","_x4","_props$message","error","loading","receiverName","userLeft","setStyle","moment","fromNow","onSubmit","ref","TextField_default","margin","placeholder","fullWidth","onChange","Registration","token","setToken","setError","defineProperty","Paper_default","elevation","required","label","type","existingUser","some","validator","isEmail","createUser","localStorage","JSON","stringify","UserQuery","App_templateObject","CreateUserMutation","App_templateObject2","DeleteUserMutation","App_templateObject3","AddUserSubscription","App_templateObject4","DeleteUserSubscription","App_templateObject5","getItem","parse","receiverState","setReceiverState","setUserLeft","hidden","setHidden","newUser","oldUser","newUsers","filter","removeItem","_props$data","src_User","display","src_Message","FrontPage","httpLink","HttpLink","uri","wsLink","WebSocketLink","options","reconnect","link","split","_getMainDefinition","getMainDefinition","kind","operation","client","ApolloClient","cache","InMemoryCache","ReactDOM","render","react_apollo_browser_umd","src_App","getElementById"],"mappings":"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","file":"static/js/main.0458b2a2.chunk.js","sourcesContent":["import React, { useCallback } from \"react\";\nimport Button from \"@material-ui/core/Button\";\n\nconst User = props => {\n  const { users, email, name, selectedMail, deleteUser } = props;\n\n  const selectUserFun = useCallback((mail, user) => {\n    selectedMail(mail, user);\n  }, [selectedMail]);\n\n  const deleteUserFun = useCallback(() => {\n    deleteUser(email);\n  }, [deleteUser, email]);\n\n  return (\n    <div className=\"user-welcome\" style={props.style}>\n      <div className=\"user-heading\">\n      <p>Hello, {name}</p>\n        <Button\n          className=\"leave\"\n          size=\"small\"\n          variant=\"outlined\"\n          onClick={deleteUserFun}\n        >\n          Leave Chat?\n        </Button>\n      </div>\n      <div className=\"select-user\">\n        {users.map(item =>\n          item.email !== email ? (\n            <div\n              key={item.id}\n              className=\"users\"\n              onClick={() => selectUserFun(item.email, item.name)}\n            >\n              {item.name}\n            </div>\n          ) : (\n            \"\"\n          )\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default User;\n","import React, { useState, useEffect, useRef } from \"react\";\nimport gql from \"graphql-tag\";\nimport { graphql, compose } from \"react-apollo\";\nimport TextField from \"@material-ui/core/TextField\";\nimport moment from \"moment\";\n\nconst MessageQuery = gql`\n  query {\n    messages {\n      id\n      message\n      senderMail\n      receiverMail\n      timestamp\n      users {\n        name\n        email\n      }\n    }\n  }\n`;\n\nconst CreateMessageMutation = gql`\n  mutation(\n    $message: String!\n    $senderMail: String!\n    $receiverMail: String!\n    $timestamp: Float!\n  ) {\n    createMessage(\n      message: $message\n      senderMail: $senderMail\n      receiverMail: $receiverMail\n      timestamp: $timestamp\n    ) {\n      message\n      senderMail\n      receiverMail\n      id\n      timestamp\n      users {\n        name\n        email\n      }\n    }\n  }\n`;\n\nconst UserTypingMutation = gql`\n  mutation($email: String!, $receiverMail: String!) {\n    userTyping(email: $email, receiverMail: $receiverMail)\n  }\n`;\n\nconst MessageSubscription = gql`\n  subscription($receiverMail: String!) {\n    newMessage(receiverMail: $receiverMail) {\n      message\n      senderMail\n      receiverMail\n      id\n      timestamp\n      users {\n        name\n        email\n      }\n    }\n  }\n`;\n\nconst UserTypingSubscription = gql`\n  subscription($receiverMail: String!) {\n    userTyping(receiverMail: $receiverMail)\n  }\n`;\n\nconst Message = props => {\n  const chatBox = useRef(null);\n\n  const [message, setMessage] = useState(\"\");\n\n  const [userTyping, setUser] = useState(\"\");\n\n  const [timer, setTimer] = useState(null);\n\n  const handleShow = () => {\n    props.setStyle()\n  }\n\n  useEffect(() => {\n    props.message.subscribeToMore({\n      document: MessageSubscription,\n      variables: {\n        receiverMail: props.email\n      },\n      updateQuery: (prev, { subscriptionData }) => {\n        if (!subscriptionData.data) return prev;\n        const msg = subscriptionData.data.newMessage;\n        if (prev.messages.find(x => x.id === msg.id)) {\n          return prev;\n        }\n        return { ...prev, messages: [...prev.messages, msg] };\n      }\n    });\n    props.message.subscribeToMore({\n      document: UserTypingSubscription,\n      variables: {\n        receiverMail: props.email\n      },\n      updateQuery: (prev, { subscriptionData }) => {\n        if (!subscriptionData.data) return prev;\n        const user = subscriptionData.data.userTyping;\n        setUser(user);\n      }\n    });\n    if (chatBox.current) {\n      scrollToBottom();\n    }\n  });\n\n  const scrollToBottom = () => {\n    chatBox.current.scrollIntoView();\n  };\n\n  const handleChange = async e => {\n    setMessage(e.target.value);\n    const { email, receiverMail } = props;\n    await props.userTyping({\n      variables: {\n        email,\n        receiverMail\n      }\n    });\n    const changeMail = async () => {\n      await props.userTyping({\n        variables: {\n          email: \"email\",\n          receiverMail\n        }\n      });\n    };\n    clearTimeout(timer);\n    setTimer(setTimeout(changeMail, 2000));\n  };\n\n  const handleSubmit = async (e, message, email) => {\n    setMessage(\"\");\n    e.preventDefault();\n    const { receiverMail } = props;\n    if (!message.length) return null;\n    await props.createMessage({\n      variables: {\n        receiverMail: receiverMail,\n        senderMail: email,\n        message: message,\n        timestamp: Date.now()\n      },\n      update: (store, { data: { createMessage } }) => {\n        const data = store.readQuery({ query: MessageQuery });\n        data.messages.push(createMessage);\n        store.writeQuery({ query: MessageQuery, data });\n      }\n    });\n    await props.userTyping({\n      variables: {\n        email: \"email\",\n        receiverMail\n      }\n    });\n  };\n\n  const {\n    message: { error, loading, messages },\n    email,\n    receiverMail,\n    receiverName,\n    userLeft\n  } = props;\n\n  if (error || loading) return null;\n\n  return (\n    <div className=\"personal-chat\" style={props.style}>\n      <div className=\"chats-header\">\n        <div className=\"back-button\" onClick={handleShow}>\n          <div className=\"bar1\" />\n          <div className=\"bar2\" />\n          <div className=\"bar3\" />\n        </div>\n        <div className=\"user-typing\">\n          {userTyping && userTyping === receiverMail\n            ? `${receiverName} is typing`\n            : receiverName}\n        </div>\n      </div>\n      <div className=\"all-messages\">\n        {messages.map(item =>\n          (item.senderMail === email && item.receiverMail === receiverMail) ||\n          (item.senderMail === receiverMail && item.receiverMail === email) ? (\n            <div\n              key={item.id}\n              className={item.users.map(a =>\n                a.email === receiverMail ? \"receiver\" : \"sender\"\n              )}\n            >\n              <div className=\"sender-name\">{item.users.map(x => x.name)}</div>\n              {item.message}{\" \"}\n              <span className=\"time\"> {moment(item.timestamp).fromNow()}</span>\n            </div>\n          ) : (\n            \"\"\n          )\n        )}\n        {userLeft && userLeft === receiverMail ? (\n          <div>{receiverName} has left the chat. </div>\n        ) : null}\n      </div>\n      {receiverMail && receiverName && !userLeft ? (\n        <form\n          onSubmit={e => handleSubmit(e, message, email)}\n          ref={chatBox}\n          className=\"chat-box\"\n        >\n          <TextField\n            style={{ margin: 10 }}\n            placeholder={\"Say something to \" + receiverName}\n            fullWidth\n            name=\"message\"\n            value={message}\n            onChange={handleChange}\n            margin=\"normal\"\n            variant=\"outlined\"\n          />\n        </form>\n      ) : (\n        <div className=\"select-message\">Select a logged in user from the left panel</div>\n      )}\n    </div>\n  );\n};\n\nexport default compose(\n  graphql(MessageQuery, { name: \"message\" }),\n  graphql(CreateMessageMutation, { name: \"createMessage\" }),\n  graphql(UserTypingMutation, { name: \"userTyping\" })\n)(Message);\n","import React, { useState } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Paper from \"@material-ui/core/Paper\";\nimport TextField from \"@material-ui/core/TextField\";\nimport validator from \"validator\";\n\nconst Registration = props => {\n  const [token, setToken] = useState({ name: \"\", email: \"\" });\n  const [error, setError] = useState(\"\");\n\n  const handleChange = e => {\n    setToken({ ...token, [e.target.name]: e.target.value });\n  };\n\n  const validate = () => {\n    const { name, email } = token;\n\n    const existingUser = props.users.some(function(user) {\n      return user.email === email;\n    });\n\n    if (!name.length) {\n      setError(\"Name is required\");\n    }\n\n    if (!validator.isEmail(email)) {\n      setError(\"Valid email is required\");\n    }\n\n    if (existingUser) {\n      setError(\"Email already in use\");\n    }\n\n    if (name.length && validator.isEmail(email) && !existingUser) {\n      setError(\"\");\n      props.createUser(email, name);\n      localStorage[\"token\"] = JSON.stringify(token);\n    }\n  };\n\n  const { name, email } = token;\n  return (\n    <Paper elevation={3} className=\"paper\">\n      User Details\n      <TextField\n        required\n        id=\"outlined-name\"\n        label=\"Name\"\n        name=\"name\"\n        value={name}\n        onChange={handleChange}\n        variant=\"outlined\"\n        style={{ margin: 10 }}\n      />\n      <TextField\n        required\n        id=\"outlined-email-input\"\n        type=\"email\"\n        label=\"Email\"\n        name=\"email\"\n        value={email}\n        onChange={handleChange}\n        variant=\"outlined\"\n        className=\"text-area\"\n        style={{ margin: 10 }}\n      />\n      <Button variant=\"contained\" onClick={validate} style={{ margin: 15 }}>\n        Enter Chat\n      </Button>\n      <div>{error}</div>\n    </Paper>\n  );\n};\n\nexport default Registration;\n","import React, { useState, useEffect } from \"react\";\nimport User from \"./User\";\nimport Message from \"./Message\";\nimport Registration from \"./FrontPage\";\nimport gql from \"graphql-tag\";\nimport { graphql, compose } from \"react-apollo\";\n\nconst UserQuery = gql`\n  query {\n    users {\n      id\n      name\n      email\n      messages {\n        message\n        senderMail\n        receiverMail\n      }\n    }\n  }\n`;\n\nconst CreateUserMutation = gql`\n  mutation($name: String!, $email: String!) {\n    createUser(name: $name, email: $email) {\n      name\n      email\n      id\n      messages {\n        message\n        senderMail\n        receiverMail\n      }\n    }\n  }\n`;\n\nconst DeleteUserMutation = gql`\n  mutation($email: String!) {\n    deleteUser(email: $email)\n  }\n`;\n\nconst AddUserSubscription = gql`\n  subscription {\n    newUser {\n      name\n      email\n      id\n      messages {\n        message\n        senderMail\n        receiverMail\n        timestamp\n      }\n    }\n  }\n`;\n\nconst DeleteUserSubscription = gql`\n  subscription {\n    oldUser\n  }\n`;\n\nconst App = props => {\n  const user =\n    (localStorage.getItem(\"token\") &&\n      JSON.parse(localStorage.getItem(\"token\"))) ||\n    {};\n\n  const [receiverState, setReceiverState] = useState({\n    receiverMail: \"\",\n    receiverName: \"\"\n  });\n\n  const [userLeft, setUserLeft] = useState(\"\");\n\n  const [hidden, setHidden] = useState(false);\n\n  const setSelectedMail = (mail, user) => {\n    setReceiverState(receiverState => {\n      return { ...receiverState, receiverMail: mail, receiverName: user };\n    });\n    setHidden(!hidden);\n  };\n\n  const setStyle = () => {\n    setHidden(!hidden);\n  }\n\n  useEffect(() => {\n    const subscribeToMore = props.data.subscribeToMore;\n    subscribeToMore({\n      document: AddUserSubscription,\n      updateQuery: (prev, { subscriptionData }) => {\n        if (!subscriptionData.data) return prev;\n        const user = subscriptionData.data.newUser;\n        if (!prev.users.find(x => x.id === user.id)) {\n          return { ...prev, users: [...prev.users, user] };\n        }\n        return prev;\n      }\n    });\n    subscribeToMore({\n      document: DeleteUserSubscription,\n      updateQuery: (prev, { subscriptionData }) => {\n        if (!subscriptionData.data) return prev;\n        const oldUser = subscriptionData.data.oldUser;\n        if (prev.users.some(x => x.email === oldUser)) {\n          const newUsers = prev.users.filter(x => x.email !== oldUser);\n          prev.users = newUsers;\n          return prev;\n        }\n        setUserLeft(oldUser);\n        return prev;\n      }\n    });\n  }, [props.data]);\n\n  const createUser = async (email, name) => {\n    await props.createUser({\n      variables: {\n        email,\n        name\n      },\n      update: (store, { data: { createUser } }) => {\n        const data = store.readQuery({ query: UserQuery });\n        if (!data.users.find(x => x.id === createUser.id)) {\n          data.users.push(createUser);\n        }\n        store.writeQuery({ query: UserQuery, data });\n      }\n    });\n  };\n\n  const deleteUser = async email => {\n    localStorage.removeItem(\"token\");\n    await props.deleteUser({\n      variables: { email },\n      update: store => {\n        const data = store.readQuery({ query: UserQuery });\n        data.users = data.users.filter(x => x.email !== email);\n        store.writeQuery({ query: UserQuery, data });\n      }\n    });\n  };\n\n  const { receiverMail, receiverName } = receiverState;\n  const {\n    data: { users, error, loading }\n  } = props;\n\n  if (loading || error) return null;\n  if (localStorage.getItem(\"token\")) {\n    return (\n      <div className=\"chat-page\">\n        <User\n          style={{ display: hidden ? \"none\" : \"block\" }}\n          users={users}\n          email={user.email}\n          name={user.name}\n          selectedMail={setSelectedMail}\n          deleteUser={deleteUser}\n        />\n        <Message\n          style={{ display: hidden ? \"block\" : \"none\" }}\n          email={user.email}\n          receiverMail={receiverMail}\n          receiverName={receiverName}\n          userLeft={userLeft}\n          name={user.name}\n          setStyle={setStyle}\n        />\n      </div>\n    );\n  }\n  return <Registration users={users} createUser={createUser} />;\n};\n\nexport default compose(\n  graphql(UserQuery),\n  graphql(CreateUserMutation, { name: \"createUser\" }),\n  graphql(DeleteUserMutation, { name: \"deleteUser\" })\n)(App);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport ApolloClient from \"apollo-client\";\nimport { ApolloProvider } from \"react-apollo\";\nimport { split } from 'apollo-link';\nimport { HttpLink } from 'apollo-link-http';\nimport { WebSocketLink } from 'apollo-link-ws';\nimport { getMainDefinition } from 'apollo-utilities';\nimport { InMemoryCache } from 'apollo-cache-inmemory'\nimport App from \"./App\";\n\nimport \"./index.css\";\n\n// Create an http link:\nconst httpLink = new HttpLink({\n  uri: 'https://mini-chat-server.herokuapp.com/'\n});\n\n// Create a WebSocket link:\nconst wsLink = new WebSocketLink({\n  uri: `wss://mini-chat-server.herokuapp.com/`,\n  options: {\n    reconnect: true\n  }\n});\n\n// using the ability to split links, you can send data to each link\n// depending on what kind of operation is being sent\nconst link = split(\n  // split based on operation type\n  ({ query }) => {\n    const { kind, operation } = getMainDefinition(query);\n    return kind === 'OperationDefinition' && operation === 'subscription';\n  },\n  wsLink,\n  httpLink,\n);\n\nconst client = new ApolloClient({\n  link,\n  cache: new InMemoryCache(),\n})\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById(\"root\")\n);\n\n"],"sourceRoot":""}